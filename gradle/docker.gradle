//---------------------------------------------------------------------------//
// Preparing WAR                                                             //
//---------------------------------------------------------------------------//

//---------------------------------------------------------------------------//
// Docker Utility                                                            //
//---------------------------------------------------------------------------//
ext.dockerCompose = hasProperty('dockerComposePath') ? property('dockerComposePath') : 'docker-compose'
ext.sudoLinux = System.properties['os.name'].toLowerCase().contains('linux') ? ['sudo'] : []

//---------------------------------------------------------------------------//
// Simple Stack [ for integration test ]                                     //
//---------------------------------------------------------------------------//
ext.simpleStackPath = 'src/integrationTest'
ext.simpleStackLock = "${simpleStackPath}/.RUNNING_INSTANCE_LOCK"
ext.radarVolumePath = "${simpleStackPath}/volumes/radar"

task buildDocker(type: Exec) {
  commandLine sudoLinux + ['docker', 'image', 'build', '-t', 'radarcns/radar-restapi:dev', '.']
}

task simpleConfigJson(type: Copy) {
  from "${simpleStackPath}/resources"
  exclude 'radar.yml'
  exclude 'keystore.jks'
  into "${radarVolumePath}"
}

task simpleRadarJson(type: Copy) {
  from "${simpleStackPath}/resources/radar.yml"
  into "${radarVolumePath}"

  filter { String line ->
    line.replace("localhost: 27017", "hotstorage: 27017")
  }
}

task installSimpleStack(type: Exec, dependsOn: [buildDocker, simpleConfigJson, simpleRadarJson]) {
  doFirst{
    def lockFile = new File(simpleStackLock)
    if (lockFile.exists()) {
      throw new GradleException("A previous instance of the simple stack is still running. Please stop it first and then try again.")
    } else {
      lockFile.createNewFile()
    }
  }

  workingDir simpleStackPath
  standardInput = System.in
  commandLine sudoLinux + [dockerCompose, 'up', '-d', '--build']

  doLast {
    // wait until the hotstorage and managementportal are ready
    sleep(60_000)
  }
}

task stopSimpleStack(type: Exec) {
  onlyIf {
    new File(simpleStackLock).exists()
  }
  standardInput = System.in
  workingDir simpleStackPath
  commandLine sudoLinux + [dockerCompose, 'down', '-v']
  doLast{
    new File(simpleStackLock).delete()
  }
}

task cleanSimpleStack(type: Delete, dependsOn: stopSimpleStack) {
  delete "${simpleStackPath}/volumes"
  delete simpleStackLock
}

stopSimpleStack.finalizedBy cleanSimpleStack

//---------------------------------------------------------------------------//
// End to End Test                                                           //
//---------------------------------------------------------------------------//
ext.e2ePath = 'src/endToEndTest'
ext.radarStackPath = "${e2ePath}"
ext.radarStackLock = "${radarStackPath}/.RUNNING_INSTANCE_LOCK"
ext.radarStackVolumePath = "${radarStackPath}/volumes/radar"


task radarConfigJson(type: Copy) {
    from "${radarStackPath}/resources"
    exclude 'radar.yml'
    exclude 'keystore.jks'
    into "${radarStackVolumePath}"
}

task radarStackYml(type: Copy) {
    from "${radarStackPath}/resources/radar.yml"
    into "${radarStackVolumePath}"

    filter { String line ->
        line.replace("localhost: 27017", "hotstorage: 27017")
    }
}

task installRadarStack(type: Exec, dependsOn: [buildDocker, radarConfigJson, radarStackYml]) {
    doFirst{
        def lockFile = new File(radarStackLock)
        if (lockFile.exists()) {
            throw new GradleException("A previous instance of the reduced stack is still running." +
                    " Please stop it first and then try again.")
        } else {
            lockFile.createNewFile()
        }
    }

    workingDir radarStackPath
    standardInput = System.in
    commandLine sudoLinux + [dockerCompose, 'up', '-d', '--build']

    doLast {
        // wait until the hotstorage and managementportal are ready
        sleep(60_000)
    }
}

ext.stoppingStack = false
task stopRadarStack(type: Exec) {
  onlyIf{
    new File(radarStackLock).exists() && !stoppingStack
  }
  doFirst{
    stoppingStack = true
  }

  standardInput = System.in
  workingDir radarStackPath
  commandLine sudoLinux + [dockerCompose, 'down', '-v']

  doLast{
    stoppingStack = false
  }
}

task cleanRadarStack(type: Exec, dependsOn: stopRadarStack) {
  onlyIf{
    !stoppingStack
  }
  commandLine sudoLinux + ['rm', '-rf', "${radarStackPath}/volumes", radarStackLock]
}

stopRadarStack.finalizedBy cleanRadarStack

//---------------------------------------------------------------------------//
// Clean definition                                                          //
//---------------------------------------------------------------------------//
clean.dependsOn cleanSimpleStack
clean.dependsOn cleanRadarStack

