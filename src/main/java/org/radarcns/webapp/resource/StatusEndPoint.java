package org.radarcns.webapp.resource;

import static org.radarcns.auth.authorization.Permission.Entity.MEASUREMENT;
import static org.radarcns.auth.authorization.Permission.Operation.READ;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import java.io.IOException;
import java.nio.file.Paths;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import org.radarcns.auth.NeedsPermission;
import org.radarcns.config.Properties;
import org.radarcns.status.hdfs.HdfsBinsData;
import org.radarcns.webapp.filter.Authenticated;

@Authenticated
@Path("/status")
public class StatusEndPoint {
    /** HDFS status. */
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path("/hdfs")
    @Operation(
            summary = "Return a list of summary of records received by the server",
            description = "Reads and displays the bins.csv file generated by HDFS restructure"
                    + " script")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "500", description = "An error occurs while executing, "
                    + "in the body there is a message.avsc object with more details"),
            @ApiResponse(responseCode = "204", description = "No value for the given parameters, "
                    + "in the body there is a message.avsc object with more details"),
            @ApiResponse(responseCode = "200", description = "Return a list of summary of records"),
            @ApiResponse(responseCode = "401", description = "Access denied error occurred"),
            @ApiResponse(responseCode = "403", description = "Not Authorised error occurred")})
    @NeedsPermission(entity = MEASUREMENT, operation = READ)
    public HdfsBinsData getJsonData() throws IOException {
        String hdfsPath = Properties.getApiConfig().getHdfsOutputDir();
        if (hdfsPath == null) {
            throw new IllegalStateException("The HDFS output directory was not configured.");
        }
        return HdfsBinsData.parse(Paths.get(hdfsPath).resolve("bins.csv"));
    }
}
