package org.radarcns.webapp;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.radarcns.auth.exception.NotAuthorizedException;
import org.radarcns.security.exception.AccessDeniedException;
import org.radarcns.webapp.util.CSVData;
import org.radarcns.webapp.util.ResponseHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.radarcns.auth.authorization.Permission.MEASUREMENT_READ;
import static org.radarcns.auth.authorization.RadarAuthorization.checkPermission;
import static org.radarcns.security.utils.SecurityUtils.getJWT;

@Path("/status")
public class StatusEndPoint {

    private static final String CSV_FILE_PATH = "/usr/local/tomcat/bin/radar/bins.csv";

    private static final Logger LOGGER = LoggerFactory.getLogger(StatusEndPoint.class);

    @Context private HttpServletRequest request;

    @GET
    @Produces("text/csv")
    @ApiOperation(
            value = "Return a list of records received by the server",
            notes = "Reads and displays the bins.csv file generated by HDFS restructure script")
    @ApiResponses(value = {
            @ApiResponse(code = 500, message = "An error occurs while executing, in the body"
                    + "there is a message.avsc object with more details"),
            @ApiResponse(code = 204, message = "No value for the given parameters, in the body"
                    + "there is a message.avsc object with more details"),
            @ApiResponse(code = 200, message = "Return a list of records"),
            @ApiResponse(code = 401, message = "Access denied error occured"),
            @ApiResponse(code = 403, message = "Not Authorised error occured")})
    public Response getData() {
        try {
            checkPermission(getJWT(request), MEASUREMENT_READ);
            List<CSVData> data = getListFromCSVFile(CSV_FILE_PATH);
            return Response.status(Response.Status.OK).entity(data).build();
        } catch (AccessDeniedException exc) {
            LOGGER.error(exc.getMessage(), exc);
            return ResponseHandler.getJsonAccessDeniedResponse(request, exc.getMessage());
        } catch (NotAuthorizedException exc) {
            LOGGER.error(exc.getMessage(), exc);
            return ResponseHandler.getJsonNotAuthorizedResponse(request, exc.getMessage());
        } catch (FileNotFoundException exc) {
            LOGGER.error(exc.getMessage(), exc);
            return ResponseHandler.getJsonErrorResponse(request, "The bins.csv file could " +
                    "not be found. Please make sure its in the right directory.");
        } catch (IOException exc) {
            LOGGER.error(exc.getMessage(), exc);
            return ResponseHandler.getJsonErrorResponse(request, "The bins.csv file could " +
                    "not be read. Please make sure its in the right format.");
        } catch (Exception exec) {
            LOGGER.error(exec.getMessage(), exec);
            return ResponseHandler.getJsonErrorResponse(request, "Your request cannot be"
                    + "completed. If this error persists, please contact "
                    + "the service administrator.");
        }
    }

    public List<CSVData> getListFromCSVFile(String csvFileToRead) throws FileNotFoundException,
            IOException{
        List<CSVData> dataList = new ArrayList<>();
        BufferedReader br = new BufferedReader(new FileReader(csvFileToRead));
        String line;

        while ((line = br.readLine()) != null) {

            String[] dataCsv = line.split(",");

            CSVData dataObj = new CSVData();

            dataObj.setTopic(dataCsv[0]);
            dataObj.setDevice(dataCsv[1]);
            dataObj.setTimestamp(dataCsv[2]);
            dataObj.setCount(dataCsv[3]);

            dataList.add(dataObj);
        }

        return dataList;
    }
}
